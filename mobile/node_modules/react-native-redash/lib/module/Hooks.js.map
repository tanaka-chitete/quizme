{"version":3,"sources":["Hooks.ts"],"names":["Animated","useRef","onGestureEvent","panGestureHandler","pinchGestureHandler","rotationGestureHandler","tapGestureHandler","scrollHandler","vec","loop","Clock","Value","diff","set","useCode","debug","block","useLazyRef","initializer","ref","current","undefined","useGestureHandler","nativeEvent","usePanGestureHandler","useRotationGestureHandler","usePinchGestureHandler","useTapGestureHandler","useScrollHandler","useVector","defaultValues","createValue","useVectors","map","values","useClock","useValue","value","useLoop","duration","boomerang","progress","useValues","v","useClocks","numberOfClocks","Array","fill","useDiff","node","dDiff","useDebug","keys","Object","name"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { useRef } from \"react\";\nimport {\n  onGestureEvent,\n  panGestureHandler,\n  pinchGestureHandler,\n  rotationGestureHandler,\n  tapGestureHandler,\n  scrollHandler,\n} from \"./Gesture\";\nimport { Vector, vec } from \"./Vectors\";\nimport { loop } from \"./AnimationRunners\";\n\nconst { Clock, Value, diff, set, useCode, debug, block } = Animated;\n\nconst useLazyRef = <T>(initializer: () => T) => {\n  const ref = useRef<T>();\n  if (ref.current === undefined) {\n    ref.current = initializer();\n  }\n  return ref.current;\n};\n\nexport const useGestureHandler = (\n  nativeEvent: Parameters<typeof onGestureEvent>[0]\n) => useLazyRef(() => onGestureEvent(nativeEvent));\n\nexport const usePanGestureHandler = () => useLazyRef(() => panGestureHandler());\nexport const useRotationGestureHandler = () =>\n  useLazyRef(() => rotationGestureHandler());\nexport const usePinchGestureHandler = () =>\n  useLazyRef(() => pinchGestureHandler());\nexport const useTapGestureHandler = () => useLazyRef(() => tapGestureHandler());\nexport const useScrollHandler = () => useLazyRef(() => scrollHandler());\n\ntype Atomic = string | number | boolean;\n\nexport const useVector = (\n  ...defaultValues: Parameters<typeof vec.createValue>\n) => useLazyRef(() => vec.createValue(...defaultValues));\n\ntype P = Parameters<typeof vec.createValue>;\ntype R = Vector<Animated.Value<number>>;\ntype UseVectors = {\n  (...v: [P]): [R];\n  (...v: [P, P]): [R, R];\n  (...v: [P, P, P]): [R, R, R];\n  (...v: [P, P, P, P]): [R, R, R, R];\n  (...v: [P, P, P, P, P]): [R, R, R, R, R];\n  (...v: [P, P, P, P, P, P]): [R, R, R, R, R, R];\n  (...v: P[]): R[];\n};\n\nexport const useVectors = (((\n  ...defaultValues: Parameters<typeof vec.createValue>[]\n) =>\n  useLazyRef(() =>\n    defaultValues.map((values) => vec.createValue(...values))\n  )) as unknown) as UseVectors;\n\nexport const useClock = () => useLazyRef(() => new Clock());\n\nexport const useValue = <V extends Atomic>(value: V) =>\n  useLazyRef(() => new Value(value));\n\nexport const useLoop = (duration = 1000, boomerang = true) => {\n  const progress = useValue(0);\n  useCode(() => set(progress, loop({ duration, boomerang })), [progress]);\n  return progress;\n};\n\ntype UseValues = {\n  <V extends Atomic>(v: V): [Animated.Value<V>];\n  <V1 extends Atomic, V2 extends Atomic>(v1: V1, v2: V2): [\n    Animated.Value<V1>,\n    Animated.Value<V2>\n  ];\n  <V1 extends Atomic, V2 extends Atomic, V3 extends Atomic>(\n    v1: V1,\n    v2: V2,\n    v3: V3\n  ): [Animated.Value<V1>, Animated.Value<V2>, Animated.Value<V3>];\n  <V1 extends Atomic, V2 extends Atomic, V3 extends Atomic, V4 extends Atomic>(\n    v1: V1,\n    v2: V2,\n    v3: V3,\n    v4: V4\n  ): [\n    Animated.Value<V1>,\n    Animated.Value<V2>,\n    Animated.Value<V3>,\n    Animated.Value<V4>\n  ];\n  <\n    V1 extends Atomic,\n    V2 extends Atomic,\n    V3 extends Atomic,\n    V4 extends Atomic,\n    V5 extends Atomic\n  >(\n    v1: V1,\n    v2: V2,\n    v3: V3,\n    v4: V4,\n    v5: V5\n  ): [\n    Animated.Value<V1>,\n    Animated.Value<V2>,\n    Animated.Value<V3>,\n    Animated.Value<V4>,\n    Animated.Value<V5>\n  ];\n  <V extends Atomic>(...values: V[]): Animated.Value<V>[];\n};\n\nexport const useValues = ((<V extends Atomic>(...values: [V, ...V[]]) =>\n  useLazyRef(() => values.map((v) => new Value(v)))) as unknown) as UseValues;\n\nexport const useClocks = (numberOfClocks: number): Animated.Clock[] =>\n  useLazyRef(() => new Array(numberOfClocks).fill(0).map(() => new Clock()));\n\nexport const useDiff = (node: Animated.Node<number>) => {\n  const dDiff = useValue(0);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const useDebug = (values: { [key: string]: Animated.Node<number> }) => {\n  const keys = Object.keys(values);\n  useCode(() => block(keys.map((name) => debug(name, values[name]))), [\n    keys,\n    values,\n  ]);\n};\n"]}